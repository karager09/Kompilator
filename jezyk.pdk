suma arg0 arg1 ->		#strzałeczka przy funkcjach
	zm1 = arg0 + arg1,                #"," odzielają instrukcje
	zm1.		#konczymy kropką, ostatnia wartosc jest wartoscią zwracaną

zm_gl = 2.


zrob_costam x ->
    print "Wpisz se jakas liczbe \n",
    z = 1.5,
    #get z,
    print "Argument funkcji to " x "\n",
    print "Podana przez Ciebie to " z "\n",
    print "Pomnozona przez 2.5 daje: " (z*2.5) "\n",
    null.


funkcja2 r ->
    zm_gl = 4,
    r = 1+2*(5/6)- 4,
	obw = (3.14*r)*r, #kolejnosc dzialan
	| obw > 2*3.14*r -> print "jest wieksze";		# "|" reprezentuje "if" % ";" reprezentuje ze beda kolejne, polaczone ze sobą warunki, "," bedzie oznaczal ze to byla pojedncza instrukcja, kolejne ify są ze soba nie polaczone
	| r > 5 -> {
		| 2<3 -> print "tak";
		| true -> print "nie"};		# niech {} będzie reprezentowalo bloki instrukcji
	| true -> print "jest mniejsze",
	zrob_costam 4. # "| true" na koncu reprezentuje "else"



silnia N ->
    zwroc = 0,
	| N <= 1-> zwroc = 1;
	| true -> zwroc = N * (silnia (N- 1)),
	zwroc.


	
	
zmienna_globalna = 7. # zmienna globalna zaimplementowana poza funkcjami, w srodku jest lokalna i przyslania


#glowna funkcja bedzie "main" ktora jest wykonywana po uruchomieniu programu

proba ar0 ar1 ->
	wynik = silnia 5,
	print wynik "\n",
	wynik = wynik/(3+1),
	print wynik "\n",
	print (suma 4 5) "\n",
	null.

main ->
    zrob_costam 5,
    print "Podaj jakegos stringa:\n",
    #get h,
    #print h "\nSilnia z 5 wynosi ",
    print (silnia 5) "\n".

# null - specjalna wartosc zwracana, pusta, moze np reprezentowac blad

#ewentualnie moga tez byc tablice

#	tab = [1,2,3].
#	fr = first tab.
#	# w tablicach mozna przechowywac dowolne wartosci
#	tab = [1,"costam", [5,6], 5.6].
#	nth_elem = nth tab 4.
	
